name: Build Electron App

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'LICENSE'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'
      - 'mkdocs.yml'
      - 'requirements-docs.txt'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'LICENSE'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'
      - 'mkdocs.yml'
      - 'requirements-docs.txt'
  workflow_dispatch:
    inputs:
      build_linux:
        description: 'Build Linux version'
        required: false
        type: boolean
        default: false
      test_cert_import:
        description: 'Test certificate import only'
        required: false
        type: boolean
        default: false

jobs:
  version-bump:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
           token: ${{ secrets.GH_PAT }}   
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      
      - name: Enable Corepack and Yarn
        run: |
          corepack enable
          
      - name: Bump Version
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git fetch origin
          git pull --rebase origin main
          yarn version patch --immediate
          git add package.json
          git commit -m "Bump version [skip ci] [skip actions]"
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git

  test-cert-import:
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.test_cert_import == 'true' }}
    runs-on: macos-latest
    steps:
      - name: Import Apple Certificates (Test)
        run: |
          echo "Base64 encoded certificate (first 100 chars):"
          echo "${{ secrets.MAC_CERTIFICATE }}" | head -c 100
          echo ""
          echo "Decoding certificate..."
          echo "${{ secrets.MAC_CERTIFICATE }}" | base64 --decode > certificate.p12
          echo "Decoded certificate file size:"
          ls -lh certificate.p12
          echo "File type:"
          file certificate.p12
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          
          echo "Attempting certificate import..."

          echo "Verifying certificate with openssl..."
          openssl pkcs12 -info -in certificate.p12 -passin pass:"${{ secrets.CERTIFICATE_PASSWORD }}" -noout
          if [ $? -eq 0 ]; then
            echo "Certificate verified successfully with openssl"
          else
            echo "Failed to verify certificate with openssl"
            exit 1
          fi
           
          security import certificate.p12 -k build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          rm certificate.p12
          echo "Certificate import successful!"

  build:
    needs: version-bump
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Setup Node.js and Python
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Enable Corepack and Yarn
        run: |
          corepack enable

      - name: Install Dependencies
        run: |
          yarn install --immutable
          
      - name: Build All App Components
        run: yarn build:app
        
      - name: Ensure compiled components target Electron Node version
        run: |
          yarn electron-rebuild

      - name: Build and Publish Electron App
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            yarn electron:package --mac --publish always
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            yarn electron:package --win --publish always
          fi
        shell: bash

  linux-build:
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.build_linux == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Setup Node.js and Python
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Enable Corepack and Yarn
        run: |
          corepack enable

      - name: Install Dependencies
        run: |
          yarn install --immutable
          
      - name: Build All App Components
        run: yarn build:app
        
      - name: Build and Publish Linux Electron App
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          yarn electron:package --linux --publish always
        shell: bash

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            dist/*.deb
            dist/*.AppImage
          retention-days: 2
          if-no-files-found: ignore
